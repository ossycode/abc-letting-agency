// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getApiAdminPermissionsCatalog, getApiAdminRoles, postApiAdminRoles, deleteApiAdminRolesByRoleName, getApiAdminRolesByRoleName, patchApiAdminRolesByRoleNameRename, getApiAdminRolesByRoleNamePermissions, postApiAdminRolesByRoleNamePermissions, putApiAdminRolesByRoleNamePermissions, deleteApiAdminRolesByRoleNamePermissionsByPermission, postApiAuthRegister, postApiAuthLogin, postApiAuthRefresh, postApiAuthLogout, getApiLandlord, postApiLandlord, deleteApiLandlordById, getApiLandlordById, patchApiLandlordById, deleteApiUser, getApiUser, patchApiUser, putApiUserPassword, getApiUsersByUserIdRoles, postApiUsersByUserIdRoles, deleteApiUsersByUserIdRolesByRoleName, getApiUsersByUserIdPermissions, postApiUsersByUserIdPermissions, deleteApiUsersByUserIdPermissionsByPermission } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetApiAdminPermissionsCatalogData, GetApiAdminRolesData, PostApiAdminRolesData, DeleteApiAdminRolesByRoleNameData, GetApiAdminRolesByRoleNameData, PatchApiAdminRolesByRoleNameRenameData, GetApiAdminRolesByRoleNamePermissionsData, PostApiAdminRolesByRoleNamePermissionsData, PutApiAdminRolesByRoleNamePermissionsData, DeleteApiAdminRolesByRoleNamePermissionsByPermissionData, PostApiAuthRegisterData, PostApiAuthRegisterError, PostApiAuthRegisterResponse, PostApiAuthLoginData, PostApiAuthLoginError, PostApiAuthLoginResponse, PostApiAuthRefreshData, PostApiAuthRefreshError, PostApiAuthRefreshResponse, PostApiAuthLogoutData, PostApiAuthLogoutError, PostApiAuthLogoutResponse, GetApiLandlordData, PostApiLandlordData, PostApiLandlordError, PostApiLandlordResponse, DeleteApiLandlordByIdData, DeleteApiLandlordByIdError, DeleteApiLandlordByIdResponse, GetApiLandlordByIdData, PatchApiLandlordByIdData, PatchApiLandlordByIdError, PatchApiLandlordByIdResponse, DeleteApiUserData, DeleteApiUserError, DeleteApiUserResponse, GetApiUserData, PatchApiUserData, PatchApiUserError, PatchApiUserResponse, PutApiUserPasswordData, PutApiUserPasswordError, PutApiUserPasswordResponse, GetApiUsersByUserIdRolesData, PostApiUsersByUserIdRolesData, DeleteApiUsersByUserIdRolesByRoleNameData, GetApiUsersByUserIdPermissionsData, PostApiUsersByUserIdPermissionsData, DeleteApiUsersByUserIdPermissionsByPermissionData } from '../types.gen';
import { client } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getApiAdminPermissionsCatalogQueryKey = (options?: Options<GetApiAdminPermissionsCatalogData>) => createQueryKey('getApiAdminPermissionsCatalog', options);

export const getApiAdminPermissionsCatalogOptions = (options?: Options<GetApiAdminPermissionsCatalogData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAdminPermissionsCatalog({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAdminPermissionsCatalogQueryKey(options)
    });
};

export const getApiAdminRolesQueryKey = (options?: Options<GetApiAdminRolesData>) => createQueryKey('getApiAdminRoles', options);

export const getApiAdminRolesOptions = (options?: Options<GetApiAdminRolesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAdminRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAdminRolesQueryKey(options)
    });
};

export const postApiAdminRolesMutation = (options?: Partial<Options<PostApiAdminRolesData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAdminRolesData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAdminRolesData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAdminRoles({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiAdminRolesByRoleNameMutation = (options?: Partial<Options<DeleteApiAdminRolesByRoleNameData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteApiAdminRolesByRoleNameData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiAdminRolesByRoleNameData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiAdminRolesByRoleName({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiAdminRolesByRoleNameQueryKey = (options: Options<GetApiAdminRolesByRoleNameData>) => createQueryKey('getApiAdminRolesByRoleName', options);

export const getApiAdminRolesByRoleNameOptions = (options: Options<GetApiAdminRolesByRoleNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAdminRolesByRoleName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAdminRolesByRoleNameQueryKey(options)
    });
};

export const patchApiAdminRolesByRoleNameRenameMutation = (options?: Partial<Options<PatchApiAdminRolesByRoleNameRenameData>>): UseMutationOptions<unknown, DefaultError, Options<PatchApiAdminRolesByRoleNameRenameData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PatchApiAdminRolesByRoleNameRenameData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchApiAdminRolesByRoleNameRename({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiAdminRolesByRoleNamePermissionsQueryKey = (options: Options<GetApiAdminRolesByRoleNamePermissionsData>) => createQueryKey('getApiAdminRolesByRoleNamePermissions', options);

export const getApiAdminRolesByRoleNamePermissionsOptions = (options: Options<GetApiAdminRolesByRoleNamePermissionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAdminRolesByRoleNamePermissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAdminRolesByRoleNamePermissionsQueryKey(options)
    });
};

export const postApiAdminRolesByRoleNamePermissionsMutation = (options?: Partial<Options<PostApiAdminRolesByRoleNamePermissionsData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAdminRolesByRoleNamePermissionsData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAdminRolesByRoleNamePermissionsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAdminRolesByRoleNamePermissions({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putApiAdminRolesByRoleNamePermissionsMutation = (options?: Partial<Options<PutApiAdminRolesByRoleNamePermissionsData>>): UseMutationOptions<unknown, DefaultError, Options<PutApiAdminRolesByRoleNamePermissionsData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutApiAdminRolesByRoleNamePermissionsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putApiAdminRolesByRoleNamePermissions({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiAdminRolesByRoleNamePermissionsByPermissionMutation = (options?: Partial<Options<DeleteApiAdminRolesByRoleNamePermissionsByPermissionData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteApiAdminRolesByRoleNamePermissionsByPermissionData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiAdminRolesByRoleNamePermissionsByPermissionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiAdminRolesByRoleNamePermissionsByPermission({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthRegisterMutation = (options?: Partial<Options<PostApiAuthRegisterData>>): UseMutationOptions<PostApiAuthRegisterResponse, PostApiAuthRegisterError, Options<PostApiAuthRegisterData>> => {
    const mutationOptions: UseMutationOptions<PostApiAuthRegisterResponse, PostApiAuthRegisterError, Options<PostApiAuthRegisterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthRegister({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthLoginMutation = (options?: Partial<Options<PostApiAuthLoginData>>): UseMutationOptions<PostApiAuthLoginResponse, PostApiAuthLoginError, Options<PostApiAuthLoginData>> => {
    const mutationOptions: UseMutationOptions<PostApiAuthLoginResponse, PostApiAuthLoginError, Options<PostApiAuthLoginData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthLogin({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthRefreshMutation = (options?: Partial<Options<PostApiAuthRefreshData>>): UseMutationOptions<PostApiAuthRefreshResponse, PostApiAuthRefreshError, Options<PostApiAuthRefreshData>> => {
    const mutationOptions: UseMutationOptions<PostApiAuthRefreshResponse, PostApiAuthRefreshError, Options<PostApiAuthRefreshData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthRefresh({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthLogoutMutation = (options?: Partial<Options<PostApiAuthLogoutData>>): UseMutationOptions<PostApiAuthLogoutResponse, PostApiAuthLogoutError, Options<PostApiAuthLogoutData>> => {
    const mutationOptions: UseMutationOptions<PostApiAuthLogoutResponse, PostApiAuthLogoutError, Options<PostApiAuthLogoutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthLogout({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiLandlordQueryKey = (options?: Options<GetApiLandlordData>) => createQueryKey('getApiLandlord', options);

export const getApiLandlordOptions = (options?: Options<GetApiLandlordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiLandlord({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiLandlordQueryKey(options)
    });
};

export const postApiLandlordMutation = (options?: Partial<Options<PostApiLandlordData>>): UseMutationOptions<PostApiLandlordResponse, PostApiLandlordError, Options<PostApiLandlordData>> => {
    const mutationOptions: UseMutationOptions<PostApiLandlordResponse, PostApiLandlordError, Options<PostApiLandlordData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiLandlord({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiLandlordByIdMutation = (options?: Partial<Options<DeleteApiLandlordByIdData>>): UseMutationOptions<DeleteApiLandlordByIdResponse, DeleteApiLandlordByIdError, Options<DeleteApiLandlordByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiLandlordByIdResponse, DeleteApiLandlordByIdError, Options<DeleteApiLandlordByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiLandlordById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiLandlordByIdQueryKey = (options: Options<GetApiLandlordByIdData>) => createQueryKey('getApiLandlordById', options);

export const getApiLandlordByIdOptions = (options: Options<GetApiLandlordByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiLandlordById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiLandlordByIdQueryKey(options)
    });
};

export const patchApiLandlordByIdMutation = (options?: Partial<Options<PatchApiLandlordByIdData>>): UseMutationOptions<PatchApiLandlordByIdResponse, PatchApiLandlordByIdError, Options<PatchApiLandlordByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiLandlordByIdResponse, PatchApiLandlordByIdError, Options<PatchApiLandlordByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchApiLandlordById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiUserMutation = (options?: Partial<Options<DeleteApiUserData>>): UseMutationOptions<DeleteApiUserResponse, DeleteApiUserError, Options<DeleteApiUserData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiUserResponse, DeleteApiUserError, Options<DeleteApiUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUserQueryKey = (options?: Options<GetApiUserData>) => createQueryKey('getApiUser', options);

export const getApiUserOptions = (options?: Options<GetApiUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserQueryKey(options)
    });
};

export const patchApiUserMutation = (options?: Partial<Options<PatchApiUserData>>): UseMutationOptions<PatchApiUserResponse, PatchApiUserError, Options<PatchApiUserData>> => {
    const mutationOptions: UseMutationOptions<PatchApiUserResponse, PatchApiUserError, Options<PatchApiUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchApiUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putApiUserPasswordMutation = (options?: Partial<Options<PutApiUserPasswordData>>): UseMutationOptions<PutApiUserPasswordResponse, PutApiUserPasswordError, Options<PutApiUserPasswordData>> => {
    const mutationOptions: UseMutationOptions<PutApiUserPasswordResponse, PutApiUserPasswordError, Options<PutApiUserPasswordData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putApiUserPassword({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersByUserIdRolesQueryKey = (options: Options<GetApiUsersByUserIdRolesData>) => createQueryKey('getApiUsersByUserIdRoles', options);

export const getApiUsersByUserIdRolesOptions = (options: Options<GetApiUsersByUserIdRolesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersByUserIdRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersByUserIdRolesQueryKey(options)
    });
};

export const postApiUsersByUserIdRolesMutation = (options?: Partial<Options<PostApiUsersByUserIdRolesData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiUsersByUserIdRolesData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiUsersByUserIdRolesData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiUsersByUserIdRoles({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiUsersByUserIdRolesByRoleNameMutation = (options?: Partial<Options<DeleteApiUsersByUserIdRolesByRoleNameData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteApiUsersByUserIdRolesByRoleNameData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiUsersByUserIdRolesByRoleNameData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiUsersByUserIdRolesByRoleName({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersByUserIdPermissionsQueryKey = (options: Options<GetApiUsersByUserIdPermissionsData>) => createQueryKey('getApiUsersByUserIdPermissions', options);

export const getApiUsersByUserIdPermissionsOptions = (options: Options<GetApiUsersByUserIdPermissionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersByUserIdPermissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersByUserIdPermissionsQueryKey(options)
    });
};

export const postApiUsersByUserIdPermissionsMutation = (options?: Partial<Options<PostApiUsersByUserIdPermissionsData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiUsersByUserIdPermissionsData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiUsersByUserIdPermissionsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiUsersByUserIdPermissions({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiUsersByUserIdPermissionsByPermissionMutation = (options?: Partial<Options<DeleteApiUsersByUserIdPermissionsByPermissionData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteApiUsersByUserIdPermissionsByPermissionData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiUsersByUserIdPermissionsByPermissionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiUsersByUserIdPermissionsByPermission({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
