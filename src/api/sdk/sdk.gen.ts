// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { GetApiAdminPermissionsCatalogData, GetApiAdminPermissionsCatalogResponses, GetApiAdminRolesData, GetApiAdminRolesResponses, PostApiAdminRolesData, PostApiAdminRolesResponses, DeleteApiAdminRolesByRoleNameData, DeleteApiAdminRolesByRoleNameResponses, GetApiAdminRolesByRoleNameData, GetApiAdminRolesByRoleNameResponses, PatchApiAdminRolesByRoleNameRenameData, PatchApiAdminRolesByRoleNameRenameResponses, GetApiAdminRolesByRoleNamePermissionsData, GetApiAdminRolesByRoleNamePermissionsResponses, PostApiAdminRolesByRoleNamePermissionsData, PostApiAdminRolesByRoleNamePermissionsResponses, PutApiAdminRolesByRoleNamePermissionsData, PutApiAdminRolesByRoleNamePermissionsResponses, DeleteApiAdminRolesByRoleNamePermissionsByPermissionData, DeleteApiAdminRolesByRoleNamePermissionsByPermissionResponses, PostApiAuthRegisterData, PostApiAuthRegisterResponses, PostApiAuthRegisterErrors, PostApiAuthLoginData, PostApiAuthLoginResponses, PostApiAuthLoginErrors, PostApiAuthRefreshData, PostApiAuthRefreshResponses, PostApiAuthRefreshErrors, PostApiAuthLogoutData, PostApiAuthLogoutResponses, PostApiAuthLogoutErrors, GetApiLandlordData, GetApiLandlordResponses, GetApiLandlordErrors, PostApiLandlordData, PostApiLandlordResponses, PostApiLandlordErrors, DeleteApiLandlordByIdData, DeleteApiLandlordByIdResponses, DeleteApiLandlordByIdErrors, GetApiLandlordByIdData, GetApiLandlordByIdResponses, GetApiLandlordByIdErrors, PatchApiLandlordByIdData, PatchApiLandlordByIdResponses, PatchApiLandlordByIdErrors, DeleteApiUserData, DeleteApiUserResponses, DeleteApiUserErrors, GetApiUserData, GetApiUserResponses, GetApiUserErrors, PatchApiUserData, PatchApiUserResponses, PatchApiUserErrors, PutApiUserPasswordData, PutApiUserPasswordResponses, PutApiUserPasswordErrors, GetApiUsersByUserIdRolesData, GetApiUsersByUserIdRolesResponses, PostApiUsersByUserIdRolesData, PostApiUsersByUserIdRolesResponses, DeleteApiUsersByUserIdRolesByRoleNameData, DeleteApiUsersByUserIdRolesByRoleNameResponses, GetApiUsersByUserIdPermissionsData, GetApiUsersByUserIdPermissionsResponses, PostApiUsersByUserIdPermissionsData, PostApiUsersByUserIdPermissionsResponses, DeleteApiUsersByUserIdPermissionsByPermissionData, DeleteApiUsersByUserIdPermissionsByPermissionResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getApiAdminPermissionsCatalog = <ThrowOnError extends boolean = false>(options?: Options<GetApiAdminPermissionsCatalogData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiAdminPermissionsCatalogResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminPermissionsCatalog',
        ...options
    });
};

export const getApiAdminRoles = <ThrowOnError extends boolean = false>(options?: Options<GetApiAdminRolesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiAdminRolesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles',
        ...options
    });
};

export const postApiAdminRoles = <ThrowOnError extends boolean = false>(options?: Options<PostApiAdminRolesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAdminRolesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiAdminRolesByRoleName = <ThrowOnError extends boolean = false>(options: Options<DeleteApiAdminRolesByRoleNameData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiAdminRolesByRoleNameResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles/{roleName}',
        ...options
    });
};

export const getApiAdminRolesByRoleName = <ThrowOnError extends boolean = false>(options: Options<GetApiAdminRolesByRoleNameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiAdminRolesByRoleNameResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles/{roleName}',
        ...options
    });
};

export const patchApiAdminRolesByRoleNameRename = <ThrowOnError extends boolean = false>(options: Options<PatchApiAdminRolesByRoleNameRenameData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchApiAdminRolesByRoleNameRenameResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles/{roleName}/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getApiAdminRolesByRoleNamePermissions = <ThrowOnError extends boolean = false>(options: Options<GetApiAdminRolesByRoleNamePermissionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiAdminRolesByRoleNamePermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles/{roleName}/permissions',
        ...options
    });
};

export const postApiAdminRolesByRoleNamePermissions = <ThrowOnError extends boolean = false>(options: Options<PostApiAdminRolesByRoleNamePermissionsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAdminRolesByRoleNamePermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles/{roleName}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putApiAdminRolesByRoleNamePermissions = <ThrowOnError extends boolean = false>(options: Options<PutApiAdminRolesByRoleNamePermissionsData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiAdminRolesByRoleNamePermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles/{roleName}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiAdminRolesByRoleNamePermissionsByPermission = <ThrowOnError extends boolean = false>(options: Options<DeleteApiAdminRolesByRoleNamePermissionsByPermissionData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiAdminRolesByRoleNamePermissionsByPermissionResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/AdminRoles/{roleName}/permissions/{permission}',
        ...options
    });
};

export const postApiAuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAuthRegisterResponses, PostApiAuthRegisterErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiAuthLogin = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAuthLoginResponses, PostApiAuthLoginErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiAuthRefresh = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthRefreshData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAuthRefreshResponses, PostApiAuthRefreshErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/refresh',
        ...options
    });
};

export const postApiAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAuthLogoutResponses, PostApiAuthLogoutErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/logout',
        ...options
    });
};

export const getApiLandlord = <ThrowOnError extends boolean = false>(options?: Options<GetApiLandlordData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiLandlordResponses, GetApiLandlordErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Landlord',
        ...options
    });
};

export const postApiLandlord = <ThrowOnError extends boolean = false>(options?: Options<PostApiLandlordData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiLandlordResponses, PostApiLandlordErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Landlord',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiLandlordById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiLandlordByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiLandlordByIdResponses, DeleteApiLandlordByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Landlord/{id}',
        ...options
    });
};

export const getApiLandlordById = <ThrowOnError extends boolean = false>(options: Options<GetApiLandlordByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiLandlordByIdResponses, GetApiLandlordByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Landlord/{id}',
        ...options
    });
};

export const patchApiLandlordById = <ThrowOnError extends boolean = false>(options: Options<PatchApiLandlordByIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchApiLandlordByIdResponses, PatchApiLandlordByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Landlord/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiUserResponses, DeleteApiUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/User',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiUser = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUserResponses, GetApiUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/User',
        ...options
    });
};

export const patchApiUser = <ThrowOnError extends boolean = false>(options?: Options<PatchApiUserData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiUserResponses, PatchApiUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/User',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putApiUserPassword = <ThrowOnError extends boolean = false>(options?: Options<PutApiUserPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiUserPasswordResponses, PutApiUserPasswordErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/User/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiUsersByUserIdRoles = <ThrowOnError extends boolean = false>(options: Options<GetApiUsersByUserIdRolesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiUsersByUserIdRolesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Users/{userId}/roles',
        ...options
    });
};

export const postApiUsersByUserIdRoles = <ThrowOnError extends boolean = false>(options: Options<PostApiUsersByUserIdRolesData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiUsersByUserIdRolesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Users/{userId}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiUsersByUserIdRolesByRoleName = <ThrowOnError extends boolean = false>(options: Options<DeleteApiUsersByUserIdRolesByRoleNameData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiUsersByUserIdRolesByRoleNameResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Users/{userId}/roles/{roleName}',
        ...options
    });
};

export const getApiUsersByUserIdPermissions = <ThrowOnError extends boolean = false>(options: Options<GetApiUsersByUserIdPermissionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiUsersByUserIdPermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Users/{userId}/permissions',
        ...options
    });
};

export const postApiUsersByUserIdPermissions = <ThrowOnError extends boolean = false>(options: Options<PostApiUsersByUserIdPermissionsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiUsersByUserIdPermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Users/{userId}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiUsersByUserIdPermissionsByPermission = <ThrowOnError extends boolean = false>(options: Options<DeleteApiUsersByUserIdPermissionsByPermissionData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiUsersByUserIdPermissionsByPermissionResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Users/{userId}/permissions/{permission}',
        ...options
    });
};
